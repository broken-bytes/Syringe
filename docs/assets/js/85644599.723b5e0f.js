"use strict";(self.webpackChunksyringe_docs=self.webpackChunksyringe_docs||[]).push([[305],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=d(t),g=i,m=c["".concat(s,".").concat(g)]||c[g]||p[g]||l;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=g;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[c]="string"==typeof e?e:i,o[1]=a;for(var d=2;d<l;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const l={sidebar_position:2,title:"Modules",description:"Registering and resolving dependencies"},o="Modules",a={unversionedId:"Usage/modules",id:"Usage/modules",title:"Modules",description:"Registering and resolving dependencies",source:"@site/docs/Usage/modules.mdx",sourceDirName:"Usage",slug:"/Usage/modules",permalink:"/Syringe/docs/Usage/modules",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Usage/modules.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Modules",description:"Registering and resolving dependencies"},sidebar:"DocumentationSidebar",previous:{title:"Containers",permalink:"/Syringe/docs/Usage/containers"}},s={},d=[{value:"Creating a Module",id:"creating-a-module",level:2},{value:"Resolving Dependencies",id:"resolving-dependencies",level:2},{value:"Passing Parameters",id:"passing-parameters",level:3},{value:"Late-resolving",id:"late-resolving",level:3},{value:"Making use of Polymorphism",id:"making-use-of-polymorphism",level:2}],u={toc:d},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modules"},"Modules"),(0,i.kt)("p",null,"Syringe introduces an intuitive module DSL that makes dependency management a breeze."),(0,i.kt)("p",null,"The following functions are part of the module DSL:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"factory { Module -> T }")," - Provides a factory that returns a new instance on every resolve"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"singleton { Module -> T }")," - Provides an instance that is retained once it is created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"module.get()")," - Resolves a previously registered dependency from this module. May be used with any number of parameters.")),(0,i.kt)("h2",{id:"creating-a-module"},"Creating a Module"),(0,i.kt)("p",null,"Let's create a new module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let yourModule = module {\n    // Dependencies go here\n}\n")),(0,i.kt)("p",null,"Let's add a singleton of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," to our module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class Service {\n    ...\n}\n\nlet yourModule = module {\n    // highlight-start\n    singleton { _ in Service() }\n    // highlight-end\n}\n")),(0,i.kt)("p",null,"Note that the same syntax applies to factories:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let yourModule = module {\n    singleton { _ in Service() }\n    // highlight-start\n    factory { _ in Int.random(0..<5) }\n    // highlight-end\n}\n")),(0,i.kt)("h2",{id:"resolving-dependencies"},"Resolving Dependencies"),(0,i.kt)("p",null,"The dependencies can now be resolved:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class View {\n    // highlight-start\n    let service: Service = inject()\n    // highlight-end\n}\n")),(0,i.kt)("p",null,"Dependencies may also resolve other dependencies inside of the module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class User {\n    ...\n}\n\nclass Service {\n    let user: User\n\n    init(user: User) {\n        self.user = user\n    }\n}\n\nlet yourModule = module {\n    // highlight-start\n    singleton { module in Service(user: module.get()!) }\n    // or \n    singleton { _ in Service(user: $0.get()!) }\n    // highlight-end\n    factory { _ in User() }\n}\n")),(0,i.kt)("p",null,"Resolved dependencies will be nil when not previously registered:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class Repository {\n    let storage: Storage\n\n    init(storage: Storage) {\n        self.storage = storage\n    }\n}\n\nlet yourModule = module {\n    // error-next-line\n    singleton { module in Repository(storage: module.get()!) }\n}\n")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Dependencies are Optional types. "),(0,i.kt)("p",{parentName:"admonition"},"If they are unfound the logger will print possible issues and the resolved dependency will be nil.")),(0,i.kt)("h3",{id:"passing-parameters"},"Passing Parameters"),(0,i.kt)("p",null,"It is also possible to pass parameters during resolve:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class Counter {\n    let value: Int \n    \n    init(x: Int, y: Int) {\n        self.value = x + y\n    }\n}\n\nlet yourModule = module {\n    // highlight-start\n    factory { _ in Counter(x: $0, y: $1) }\n    // highlight-end\n}\n\nclass View {\n    init() {\n        // highlight-start\n        var counter: Counter = inject(1, 2)!\n        // highlight-end\n    }\n}\n")),(0,i.kt)("admonition",{title:"Singletons ",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Passing parameters to singletons works only for the first time. Once singletons are created parameters are ignored on subsequent resolves.")),(0,i.kt)("h3",{id:"late-resolving"},"Late-resolving"),(0,i.kt)("p",null,"Sometimes it is inevitable to have a circular dependency. Syringe allows you to break the circle and late-resolve certain dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class Parent {\n    public let child: Child\n    \n    public init(child: Child) {\n        self.child = child\n    }\n}\n\npublic class Child {\n    public var parent: Parent!\n    \n    init() {\n        \n    }\n}\n\nlet testModule = module {\n    singleton { module in Parent(child: module.get()) }\n    // highlight-start\n        .onInit { module, other in \n            // Only parameter is the target dependency as Any?\n            guard let parent: Parent = other as? Parent else { fatalError() }\n            let child: Child = module.get()!\n            child.parent = parent\n        }\n    // highlight-end\n    singleton { _ in Child() }\n}\n\ninjectSyringe {\n    modules {\n        testModule\n    }\n}\n")),(0,i.kt)("h2",{id:"making-use-of-polymorphism"},"Making use of Polymorphism"),(0,i.kt)("p",null,"Sometimes you want your dependency to be the base type of something, while the returned object is a specialisation of that. Syringe allows that via regular Swift typecasts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"protocol Repository {\n    func load()\n}\n\nclass RepoImpl: Repository {\n    func load() {\n        ...\n    }\n}\n\nclass RepoMock: Repository {\n    func load() {\n        ...\n    }\n}\n\nlet yourModule = module {\n    // Use mock for testing\n    #if TESTING\n    singleton { _ in RepoMock() as Repository }\n    // Use live for anything else\n    #else\n    singleton { _ in RepoImpl() as Repository }\n    #endif\n}\n\nclass View {\n    let repo: Repository = inject()!\n\n    init() {\n        repo.load()\n    }\n}\n")))}p.isMDXComponent=!0}}]);